/*
Copyright 2022 The Arbiter Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kube-arbiter/arbiter/pkg/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScoreLister helps list Scores.
// All objects returned here must be treated as read-only.
type ScoreLister interface {
	// List lists all Scores in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Score, err error)
	// Scores returns an object that can list and get Scores.
	Scores(namespace string) ScoreNamespaceLister
	ScoreListerExpansion
}

// scoreLister implements the ScoreLister interface.
type scoreLister struct {
	indexer cache.Indexer
}

// NewScoreLister returns a new ScoreLister.
func NewScoreLister(indexer cache.Indexer) ScoreLister {
	return &scoreLister{indexer: indexer}
}

// List lists all Scores in the indexer.
func (s *scoreLister) List(selector labels.Selector) (ret []*v1alpha1.Score, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Score))
	})
	return ret, err
}

// Scores returns an object that can list and get Scores.
func (s *scoreLister) Scores(namespace string) ScoreNamespaceLister {
	return scoreNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScoreNamespaceLister helps list and get Scores.
// All objects returned here must be treated as read-only.
type ScoreNamespaceLister interface {
	// List lists all Scores in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Score, err error)
	// Get retrieves the Score from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Score, error)
	ScoreNamespaceListerExpansion
}

// scoreNamespaceLister implements the ScoreNamespaceLister
// interface.
type scoreNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Scores in the indexer for a given namespace.
func (s scoreNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Score, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Score))
	})
	return ret, err
}

// Get retrieves the Score from the indexer for a given namespace and name.
func (s scoreNamespaceLister) Get(name string) (*v1alpha1.Score, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("score"), name)
	}
	return obj.(*v1alpha1.Score), nil
}
