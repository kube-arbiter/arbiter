/*
Copyright 2022 The Arbiter Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kube-arbiter/arbiter/pkg/apis/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ObservabilityIndicantLister helps list ObservabilityIndicants.
// All objects returned here must be treated as read-only.
type ObservabilityIndicantLister interface {
	// List lists all ObservabilityIndicants in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObservabilityIndicant, err error)
	// ObservabilityIndicants returns an object that can list and get ObservabilityIndicants.
	ObservabilityIndicants(namespace string) ObservabilityIndicantNamespaceLister
	ObservabilityIndicantListerExpansion
}

// observabilityIndicantLister implements the ObservabilityIndicantLister interface.
type observabilityIndicantLister struct {
	indexer cache.Indexer
}

// NewObservabilityIndicantLister returns a new ObservabilityIndicantLister.
func NewObservabilityIndicantLister(indexer cache.Indexer) ObservabilityIndicantLister {
	return &observabilityIndicantLister{indexer: indexer}
}

// List lists all ObservabilityIndicants in the indexer.
func (s *observabilityIndicantLister) List(selector labels.Selector) (ret []*v1alpha1.ObservabilityIndicant, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObservabilityIndicant))
	})
	return ret, err
}

// ObservabilityIndicants returns an object that can list and get ObservabilityIndicants.
func (s *observabilityIndicantLister) ObservabilityIndicants(namespace string) ObservabilityIndicantNamespaceLister {
	return observabilityIndicantNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ObservabilityIndicantNamespaceLister helps list and get ObservabilityIndicants.
// All objects returned here must be treated as read-only.
type ObservabilityIndicantNamespaceLister interface {
	// List lists all ObservabilityIndicants in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ObservabilityIndicant, err error)
	// Get retrieves the ObservabilityIndicant from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ObservabilityIndicant, error)
	ObservabilityIndicantNamespaceListerExpansion
}

// observabilityIndicantNamespaceLister implements the ObservabilityIndicantNamespaceLister
// interface.
type observabilityIndicantNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ObservabilityIndicants in the indexer for a given namespace.
func (s observabilityIndicantNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ObservabilityIndicant, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ObservabilityIndicant))
	})
	return ret, err
}

// Get retrieves the ObservabilityIndicant from the indexer for a given namespace and name.
func (s observabilityIndicantNamespaceLister) Get(name string) (*v1alpha1.ObservabilityIndicant, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("observabilityindicant"), name)
	}
	return obj.(*v1alpha1.ObservabilityIndicant), nil
}
