project_name: arbiter
env:
  - REGISTRY=docker.io/kubearbiter
before:
  hooks:
    - make binary WHAT=abctl
    - make image OUTPUT_TYPE=registry
builds:
  - skip: true
archives:
  - id: cli
    # This will create an archive without any binaries, only the files are there.
    # The name template must not contain any references to `Os`, `Arch` and etc, since the archive will be meta.
    meta: true
    # Archive name template.
    name_template: '{{ .ProjectName }}_{{ .Version }}'
    # If set to true, will strip the parent directories away from binary files.
    strip_parent_binary_folder: true
    # Can be used to change the archive formats for specific GOOSs.
    # Most common use case is to archive as zip on Windows.
    format_overrides:
      - goos: windows
        format: zip
    # Additional files/template/globs you want to add to the archive.
    # Defaults are any files matching `LICENSE*`, `README*`, `CHANGELOG*`,
    #  `license*`, `readme*` and `changelog*`.
    files:
      - LICENSE*
      - README*
      - src: '_output/bin/*/*/abctl'
        dst: cli
        # Strip parent folders when adding files to the archive.
        strip_parent: true
release:
  # If set to true, will not auto-publish the release.
  draft: true
  # Whether to remove existing draft releases with the same name before creating
  # a new one.
  replace_existing_draft: false
  # What to do with the release notes in case there the release already exists.
  #
  # Valid options are:
  # - `keep-existing`: keep the existing notes
  # - `append`: append the current release notes to the existing notes
  # - `prepend`: prepend the current release notes to the existing notes
  # - `replace`: replace existing notes
  mode: append
  # Header template for the release body.
  header: |
    ## {{.ProjectName}}-v{{.Version}} 

    Welcome to this new release!
 
    ### Images built for this release:
    - scheduler (for kubernetes v1.21+): `{{.Env.REGISTRY}}/scheduler:v{{.Version}}`
    - scheduler (for kubernetes v1.18 ~ v1.20): `{{.Env.REGISTRY}}/scheduler:pre-v{{.Version}}`
    - observer:  `{{.Env.REGISTRY}}/observer:v{{.Version}}`
    - executor:  `{{.Env.REGISTRY}}/executor:v{{.Version}}`
    
    ### Breaking Changes:
    None
  # Footer template for the release body.
  footer: |
    ## Thanks to our Contributors!
    
    Thank you to everyone who contributed to {{.Tag}}! ‚ù§Ô∏è

    And thank you very much to everyone else not listed here who contributed in other ways like filing issues, giving feedback, testing fixes, helping users in slack, etc. üôè
  name_template: "{{.ProjectName}}-v{{.Version}}"
changelog:
  # Changelog generation implementation to use.
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author login to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog.
  # - `github-native`: uses the GitHub release notes generation API, disables the groups feature.
  use: github
  sort: asc
  # Max commit hash length to use in the changelog.
  # 0: use whatever the changelog implementation gives you
  # -1: remove the commit hash from the changelog
  # any other number: max length.
  abbrev: 0
  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Proving no regex means all commits will be grouped under the default group.
  # Groups are disabled when using github-native, as it already groups things by itself.
  groups:
    - title: New Features
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: 'Bug Fixes'
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 1
    - title: Others
      order: 999
  filters:
    # Commit messages matching the regexp listed here will be removed from
    # the changelog
    exclude:
      - '^Merge branch'
milestones:
    # Whether to close the milestone
  - close: true
    # Name of the milestone
    name_template: "{{.Tag}}"
# TODO(Abirdcfly): add Announce?
